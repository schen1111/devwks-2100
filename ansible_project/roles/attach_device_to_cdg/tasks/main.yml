---
# tasks file for attach_device_to_cdg

- name: get authentication token
  include_role: 
    role: get_crosswork_authentication

# The filtering allows the API call to return device details for devices matches the connectivity_ip
#   in global_variable.yml variable file
- name: invoke nodes query API to obtain device UUID for devices that are onboarded to CW
  uri:
    validate_certs: no
    status_code: [200, 201, 202]
    method: POST
    url: "https://{{cnc_ip}}:{{cnc_port}}/crosswork/inventory/v1/nodes/query"
    return_content: yes
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: "Bearer {{ myJWT.content }}"
    body_format: json
    body: 
      filter:
        node_ip:
          inet_addr: "{{item.connectivity_ip}}"
  register: getDeviceUUIDOutput
  loop: "{{devices}}"
  loop_control: 
    label: "{{item.host_name}}"


- name: print device UUID nodes query API reponse if device is not currently attached to a CDG
  debug:
    msg: "Device name: {{item.json.data[0].host_name}} Device IP: {{item.json.data[0].node_ip.inet_addr}} Device UUID: {{item.json.data[0].uuid}}"
  with_items: "{{getDeviceUUIDOutput.results}}"
  loop_control: 
    label: "{{item.json.data[0].host_name}}"
  when: item.json.data[0].dg_uuid is not defined


# Create a new dictionary variable which device IP as the key and the vdguuid as the value. 
#  The next task will leverage this variable to look up which device should be attach to which CDG.
- name: create a new dictionary with Device IP and Device vdguuid
  set_fact:
    device_vdguuid_dict: "{{ device_vdguuid_dict | default([]) | combine ({ item.connectivity_ip : item.vdguuid }) }}"
  with_items: "{{devices}}"
  loop_control: 
    label: "{{item.host_name}}"

- name: print device_vdguuid_dict
  debug:
    var: device_vdguuid_dict

# Create a list of dictionaries with hostname, deivce ip and device uuid and 
#  planned vdguuid for devices that aren't attached to a CDG
- name: create a list of dictionaries for the Jinja2 template
  set_fact:
    device_uuid_cdguuid_list: "{{ device_uuid_cdguuid_list | default([]) + [{ 'ip' : item.json.data[0].node_ip.inet_addr, 'device_uuid' : item.json.data[0].uuid, 'hostname' :  item.json.data[0].host_name, 'cdguuid' : device_vdguuid_dict[item.json.data[0].node_ip.inet_addr] }] }}"
  with_items: "{{getDeviceUUIDOutput.results}}"
  loop_control: 
    label: "{{item.json.data[0].host_name}}"
  when: item.json.data[0].dg_uuid is not defined

# - name: print device_uuid_cdguuid_list
#   debug:
#     var: device_uuid_cdguuid_list


# The API payload files created under this task is for reference only.
# You can see payload for each device under folder /temp_folder/attach_device_to_cdg_api_payload
# devices variable is defined under global_variable.yml
- name: create API payloads for attach CDG to devices
  template:
    src: "../templates/attach-cdg.j2"
    dest: "{{playbook_dir}}/temp_folder/attach_device_to_cdg_api_payload/attach-cdg-{{item.hostname}}.json"
  loop: "{{device_uuid_cdguuid_list}}"
  loop_control: 
    label: "{{item.hostname}}"


# Invoke attach device to CDG API to attached device (currently not attached to a CDG) to CDG 
- name: invoke attach device to CDG API
  uri:
    validate_certs: no
    status_code: [200, 201, 202]
    method: PUT
    url: "https://{{cnc_ip}}:{{cnc_port}}/crosswork/inventory/v1/dg/devicemapping"
    return_content: yes
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: "Bearer {{ myJWT.content }}"
    body_format: json
    body: "{{ lookup('template', '../templates/attach-cdg.j2') }}"
  register: attachCDGOutput
  with_items: "{{device_uuid_cdguuid_list}}"


# - name: print attach device to CDG API response
#   debug:
#     var: attachCDGOutput


- name: print selected attach device to CDG API response
  debug:
    msg: "Device: {{item.item.hostname}}. State: {{item.json.state}}. Type: {{item.json.type}}"
  with_items: "{{attachCDGOutput.results}}"
  loop_control: 
    label: "{{item.item.hostname}}"